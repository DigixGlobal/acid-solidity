"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const web3_interface_adapter_1 = require("./web3-interface-adapter");
const getNetworkTypeClass = (networkType = "ethereum") => {
    const supportedEvmNetworks = ["ethereum", "fabric-evm", "quorum"];
    if (supportedEvmNetworks.includes(networkType))
        return "evm-like";
    return networkType;
};
const createAdapterForNetworkType = ({ provider, networkType = "ethereum" }) => {
    switch (getNetworkTypeClass()) {
        case "evm-like":
            return new web3_interface_adapter_1.Web3InterfaceAdapter({
                provider: provider,
                networkType: networkType
            });
        default:
            throw Error(`Sorry, "${networkType}" is not supported at this time.`);
    }
};
class InterfaceAdapter {
    constructor(options) {
        this.provider = options.provider;
        this.setNetworkType(options.networkType);
    }
    setNetworkType(networkType) {
        this.adapter = createAdapterForNetworkType({
            networkType,
            provider: this.provider
        });
    }
    getNetworkId() {
        return this.adapter.getNetworkId();
    }
    getBlock(block) {
        return this.adapter.getBlock(block);
    }
    setProvider(provider) {
        return this.adapter.setProvider(provider);
    }
    getTransaction(tx) {
        return this.adapter.getTransaction(tx);
    }
    getTransactionReceipt(tx) {
        return this.adapter.getTransactionReceipt(tx);
    }
    getBalance(address) {
        return this.adapter.getBalance(address);
    }
}
exports.InterfaceAdapter = InterfaceAdapter;
//# sourceMappingURL=interface-adapter.js.map